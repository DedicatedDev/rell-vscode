{
  "NameSpace Definition": {
    "prefix": "namespace",
    "body": ["namespace ${1:name} {}"],
    "description": "NameSpace Definition"
  },

  "Module: Definition": {
    "prefix": "module",
    "body": ["module;"],
    "description": "Module Definition"
  },

  "Entity Definition": {
    "prefix": "entity",
    "body": ["entity ${1:name} {}"],
    "description": "entity Definition"
  },

  "Struct Definition": {
    "prefix": "struct",
    "body": ["struct ${1:name} {}"],
    "description": "struct Definition"
  },

  "Operation Definition": {
    "prefix": "operation",
    "body": ["operation ${1:name}() {", "\t$0", "}"],
    "description": "operation Method Definition"
  },

  "Query Definition": {
    "prefix": "query",
    "body": ["query ${1:name}() {", "\t$0", "}"],
    "description": "query Method Definition"
  },

  "function Definition": {
    "prefix": "function",
    "body": ["function ${1:name}(): $2 {", "\t$0", "}"],
    "description": "query Method Definition"
  },

  "Import Statement": {
    "prefix": "import",
    "body": ["import $0: ${1:module};"],
    "description": "Import external module"
  },

  "At-Operator": {
    "prefix": "operator",
    "body": ["$0 @$1 {$2 == $3 and $4 == $5 } (.$6,.$7);"],
    "description": "At-Operator for database manage"
  },

  "Sorting-asc": {
    "prefix": "sorting-asc",
    "body": ["$0 @$1 {$2 == $3 and $4 == $5 } (@sort .$6, @sort .$7);"],
    "description": "At-Operator with result sort"
  },

  "Sorting-desc ": {
    "prefix": "sorting-desc",
    "body": ["$0 @$1 {.$2 == $2 and .$3 == $3 } ( @sort_desc .$2, @sort_desc .$3);"],
    "description": "At-Operator with result sort"
  },

  "Tail part-Limit ": {
    "prefix": "limiting-records",
    "body": [" limit $1;"],
    "description": "At-Operator with limited result"
  },
  "Tail part-Offset ": {
    "prefix": "offsetting-records",
    "body": [" offset $1;"],
    "description": "At-Operator with Offsetting records"
  },

  "Nested At-Operators": {
    "prefix": "nested-operator",
    "body": ["$0 @* { .$1 == $1 @ { .name == 'Microsoft' } } ( ... );"],
    "description": "At-Operator with Offsetting records"
  },

  "Create Statement": {
    "prefix": "create",
    "body": ["create $0 @${?} {$2 == $3 and $4 == $5 } (.$6,.$7);"],
    "description": "Must specify all attributes that don’t have default values."
  },

  "Update Statement": {
    "prefix": "update",
    "body": ["update $0 @$1 {$2 == $3 and $4 == $5 } (.$6,.$7);"],
    "description": "Operators @, @?, @*, @+ are used to specify cardinality, like for the at-operator. If the number of updated records does not match the cardinality, a run-time error occurs."
  },

  "Delete Statement": {
    "prefix": "delete",
    "body": ["delete $0 @${?} {$2 == $3 and $4 == $5 } (.$6,.$7);"],
    "description": "Operators @, @?, @*, @+ are used to specify cardinality, like for the at-operator. If the number of deleted records does not match the cardinality, a run-time error occurs."
  },

  "Op_context Statement": {
    "prefix": "op_context",
    "body": ["op_context.${1:pubkey};"],
    "description": "op_context"
  },

  "Chain_context Statement": {
    "prefix": "chain_context",
    "body": ["chain_context.args.$0;"],
    "description": "chain_context"
  },

  "Is_Signer Statement": {
    "prefix": "is_signer",
    "body": ["is_signer(${1:pubkey});"],
    "description": "signer"
  },

  "Block_height Statement": {
    "prefix": "block_height",
    "body": ["op_context.block_height;"],
    "description": "the height of the block currently being built (equivalent of op_context.transaction.block.block_height)."
  },

  "Last_block_time Statement": {
    "prefix": "last-block-time",
    "body": ["op_context.last_block_time;"],
    "description": "Other timestamp of the last block, in milliseconds (like System.currentTimeMillis() in Java). Returns -1 if there is no last block (the block currently being built is the first block)."
  },

  "context transaction Statement": {
    "prefix": "transaction",
    "body": ["op_context.transaction;"],
    "description": "the transaction currently being built"
  },

  "abs: function": {
    "prefix": "abs",
    "body": ["abs(${1:integer})"],
    "description": "absolute value"
  },

  "empty: function": {
    "prefix": "empty",
    "body": ["empty($1)"],
    "description": "returns true if the argument is null or an empty collection and false"
  },

  "log: function": {
    "prefix": "log",
    "body": ["log($1);"],
    "description": "print a message to the log (same usage as print)"
  },

  "max: function": {
    "prefix": "max",
    "body": ["max($1,$2)"],
    "description": "maximum of two values"
  },

  "min: function": {
    "prefix": "min",
    "body": ["min($1,$2)"],
    "description": "maximum of two values"
  },

  "keccak256: function": {
    "prefix": "keccak256",
    "body": ["keccak256(${1:byte_array});"],
    "description": " cryptographic hash functions"
  },

  "sha256: function": {
    "prefix": "sha256",
    "body": ["sha256(${1:byte_array});"],
    "description": " cryptographic hash functions"
  },

  "@external: prefix": {
    "prefix": "@external",
    "body": ["@external('$1')"],
    "description": "Prefix keyword"
  },

  "@mount: prefix": {
    "prefix": "@mount",
    "body": ["@mount('$1')"],
    "description": "Prefix key word"
  },

  "Log to the print": {
    "prefix": "print",
    "body": ["print($1);"],
    "description": "Log to the console"
  },

  "Require to the print": {
    "prefix": "require",
    "body": ["require($0);"],
    "description": "Log to the console"
  },

  "Assert to the print": {
    "prefix": "assert_equals",
    "body": ["assert_equals(actual: $1, expected: $2);"],
    "description": "fail (throw an exception) if two values are not equal"
  },

  "Assert not equal": {
    "prefix": "assert_not_equals",
    "body": ["assert_not_equals(actual: $1, expected: $2);"],
    "description": " fail if the values are equal"
  },

  "Assert True": {
    "prefix": "assert_true",
    "body": ["assert_true(actual: $1);"],
    "description": "assert that the value is “true”"
  },

  "Assert False": {
    "prefix": "assert_false",
    "body": ["assert_false(actual: $1);"],
    "description": "assert that the value is “false”"
  },

  "Assert Null": {
    "prefix": "assert_null",
    "body": ["assert_null(actual: $T);"],
    "description": "assert that the value is null"
  },

  "Assert Not Null": {
    "prefix": "assert_not_null",
    "body": ["assert_not_null(actual: $1);"],
    "description": "assert that the value is not null"
  },

  "Assert LT": {
    "prefix": "assert_lt",
    "body": ["assert_lt(actual: $T, expected: $T);"],
    "description": "assert less than (actual < expected)"
  },

  "Assert GT": {
    "prefix": "assert_gt",
    "body": ["assert_gt(actual: $T, expected: $T);"],
    "description": "assert greater than (actual > expected)"
  },

  "Assert LE": {
    "prefix": "assert_le",
    "body": ["assert_le(actual: $T, expected: $T);"],
    "description": " assert less or equal (actual <= expected)"
  },

  "Assert GE": {
    "prefix": "assert_ge",
    "body": ["assert_ge(actual: $T, expected: $T);"],
    "description": "assert greater or equal (actual >= expected)"
  },

  "Assert GT LT": {
    "prefix": "assert_gt_le",
    "body": ["assert_gt_le(actual: $T, min: $T, max: $T);"],
    "description": "assert (actual > min) and (actual < max)"
  },

  "Assert GT LE": {
    "prefix": "assert_gt_le",
    "body": ["assert_gt_le(actual: $T, expected: $T);"],
    "description": "assert (actual > min) and (actual <= max)"
  },

  "Assert GE LT": {
    "prefix": "assert_ge_lt",
    "body": ["assert_ge_lt(actual: $T, expected: $T);"],
    "description": "assert (actual >= min) and (actual < max)"
  },
  "Assert GE LE": {
    "prefix": "assert_ge_le",
    "body": ["assert_ge_le(actual: $T, expected: $T);"],
    "description": "assert (actual >= min) and (actual <= max)"
  },

  "Rell test": {
    "prefix": "rell.test",
    "body": ["rell.test.$0"],
    "description": "rell test"
  },
  "test.tx": {
    "prefix": "tx",
    "body": ["tx($0)"],
    "description": "test transaction"
  },
  "test.op": {
    "prefix": "op",
    "body": ["op($0($1))"],
    "description": "test Operation"
  },
  "test.sign": {
    "prefix": "sign",
    "body": ["sign($0)"],
    "description": "transaction sign"
  },
  "test.nop": {
    "prefix": "nop",
    "body": ["nop($0)"],
    "description": "nop transaction"
  },
  "test.run": {
    "prefix": "run",
    "body": ["run()"],
    "description": "transaction run"
  },

  "test.run_must_fail": {
    "prefix": "run_must_fail",
    "body": ["run_must_fail();"],
    "description": "transaction run"
  },

  "test.keypairs": {
    "prefix": "rell.test.keypairs",
    "body": ["rell.test.keypairs.{$0,$1};"],
    "description": "test Operation"
  },

  "test.privkeys": {
    "prefix": "rell.test.privkeys",
    "body": ["rell.test.privkeys.{$0,$1};"],
    "description": "test Operation"
  },
  "test.pubkeys": {
    "prefix": "rell.test.pubkeys",
    "body": ["rell.test.pubkeys.{$0,$1};"],
    "description": "test Operation"
  }
}
